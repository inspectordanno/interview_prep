{"version":3,"sources":["components/powerSet.js","main.js"],"names":["powerSet","inputStr","stringCollection","startIndex","length","substring","substr","push","removeEmptyStr","filter","str","unique","Set","sortStrings","a","b","aLower","toLowerCase","bLower","sort","console","log"],"mappings":";;ACIA;;;;;;ADJA,SAASA,QAAT,CAAkBC,QAAlB,EAA4B;AAC1B;AACA,MAAMC,gBAAgB,GAAG,EAAzB,CAF0B,CAI1B;AAEA;;AACA,MAAIC,UAAU,GAAG,CAAjB,CAP0B,CAQ1B;;AACA,MAAIC,MAAM,GAAG,CAAb,CAT0B,CAW1B;;AACA,SAAOD,UAAU,GAAGF,QAAQ,CAACG,MAA7B,EAAqC;AACnC;AACA,QAAMC,SAAS,GAAGJ,QAAQ,CAACK,MAAT,CAAgBH,UAAhB,EAA4BC,MAA5B,CAAlB;AACAF,IAAAA,gBAAgB,CAACK,IAAjB,CAAsBF,SAAtB,EAHmC,CAInC;;AACAD,IAAAA,MAAM,IAAI,CAAV,CALmC,CAOnC;;AACA,QAAIA,MAAM,GAAGH,QAAQ,CAACG,MAAT,GAAkBD,UAA/B,EAA2C;AACzC;AACAA,MAAAA,UAAU,IAAI,CAAd,CAFyC,CAGzC;;AACAC,MAAAA,MAAM,GAAG,CAAT;AACD;AACF,GA1ByB,CA4B1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;AACA,MAAMI,cAAc,GAAGN,gBAAgB,CAACO,MAAjB,CAAwB,UAAAC,GAAG;AAAA,WAAIA,GAAG,KAAK,GAAR,IAAeA,GAAG,KAAK,EAA3B;AAAA,GAA3B,CAAvB,CA5C0B,CA6C1B;;AACA,MAAMC,MAAM,sBAAO,IAAIC,GAAJ,CAAQJ,cAAR,CAAP,CAAZ,CA9C0B,CA+C1B;;;AACA,WAASK,WAAT,CAAqBC,CAArB,EAAuBC,CAAvB,EAA0B;AACxB,QAAMC,MAAM,GAAGF,CAAC,CAACG,WAAF,EAAf;AACA,QAAMC,MAAM,GAAGH,CAAC,CAACE,WAAF,EAAf;;AAEA,QAAID,MAAM,GAAGE,MAAb,EAAqB;AACnB,aAAO,CAAC,CAAR;AACD,KAFD,MAEO,IAAIF,MAAM,GAAGE,MAAb,EAAqB;AAC1B,aAAO,CAAP;AACD,KAFM,MAEA,IAAIF,MAAM,KAAKE,MAAf,EAAuB;AAC5B,aAAO,CAAP;AACD;AACF;;AAEDP,EAAAA,MAAM,CAACQ,IAAP,CAAY,UAACL,CAAD,EAAGC,CAAH;AAAA,WAASF,WAAW,CAACC,CAAD,EAAGC,CAAH,CAApB;AAAA,GAAZ;AAEA,SAAOJ,MAAP;AACD;;AAAA;AAEDS,OAAO,CAACC,GAAR,CAAYrB,QAAQ,CAAC,uBAAD,CAApB","file":"main.1f19ae8e.js","sourceRoot":"..","sourcesContent":["function powerSet(inputStr) {\n  //collect of strings\n  const stringCollection = [];\n\n  //0n solution\n\n  //beginning index is 0\n  let startIndex = 0;\n  //beginning length is 1\n  let length = 1;\n\n  //while the start index is less than the total length\n  while (startIndex < inputStr.length) {\n    //push a substring from start index with length length\n    const substring = inputStr.substr(startIndex, length);\n    stringCollection.push(substring);\n    //increase length by 1\n    length += 1;\n\n    // if the length is greater than the remaining length of the string\n    if (length > inputStr.length - startIndex) {\n      //increase the start index\n      startIndex += 1;\n      //reset length to 1\n      length = 1;\n    }\n  }\n\n  // 0n^2 solution\n\n  //collects all strings from startIndex to looping end point\n  // const getSubstring = (startIndex) => {\n  //   for (let i = 1; i <= inputStr.length; i++) {\n  //     const subString = inputStr.substr(startIndex, i);\n  //     stringCollection.push(subString);\n  //   }\n  // }\n\n  // //loops the start index\n  // for (let i = 0; i <= inputStr.length; i++) {\n  //   getSubstring(i);\n  // }\n\n  //removes spaces and empty strings\n  const removeEmptyStr = stringCollection.filter(str => str !== ' ' && str !== '');\n  //uses set to remove duplicate strings\n  const unique = [...new Set(removeEmptyStr)];\n  //sort unique strings by alphabetical order\n  function sortStrings(a,b) {\n    const aLower = a.toLowerCase();\n    const bLower = b.toLowerCase();\n\n    if (aLower < bLower) {\n      return -1;\n    } else if (aLower > bLower) {\n      return 1;\n    } else if (aLower === bLower) {\n      return 0;\n    }\n  }\n\n  unique.sort((a,b) => sortStrings(a,b));\n\n  return unique;\n};\n\nconsole.log(powerSet('UnitedStatesofAmerica'));\n\n\n","// import './components/countUniqueValues';\n// import './components/slidingWindow';\n// import './components/fundamentalsCheck';\n// import './components/vowelsReversed';\nimport './components/powerSet';\n\n\n\n\n\n"]}